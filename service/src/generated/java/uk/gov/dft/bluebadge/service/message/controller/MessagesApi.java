/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package uk.gov.dft.bluebadge.service.message.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import java.io.IOException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import uk.gov.dft.bluebadge.model.message.UserId;
import uk.gov.dft.bluebadge.model.message.UserResponse;

@Api(value = "Messages", description = "the Messages API")
public interface MessagesApi {

  Logger log = LoggerFactory.getLogger(MessagesApi.class);

  default Optional<ObjectMapper> getObjectMapper() {
    return Optional.empty();
  }

  default Optional<HttpServletRequest> getRequest() {
    return Optional.empty();
  }

  default Optional<String> getAcceptHeader() {
    return getRequest().map(r -> r.getHeader("Accept"));
  }

  @ApiOperation(
    value = "Removes an email link",
    nickname = "messagesGuidDelete",
    notes = "Removes an email link specified by the message GUI",
    tags = {
      "Messages",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(code = 200, message = "Success - The email link has been removed"),
      @ApiResponse(code = 404, message = "Not Found - The guid specified cannot be found")
    }
  )
  @RequestMapping(
    value = "/messages/{guid}",
    produces = {"application/json"},
    consumes = {"application/json"},
    method = RequestMethod.DELETE
  )
  default ResponseEntity<Void> messagesGuidDelete(
      @ApiParam(
            value =
                "GUID of email link that will be removed, e.g. e61ae7be-3d2f-4f32-9aab-adc915b6b58c",
            required = true
          )
          @PathVariable("guid")
          String guid) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default MessagesApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @ApiOperation(
    value = "Gets a user",
    nickname = "messagesGuidUserGet",
    notes = "Gets a user for the specified message guid",
    response = UserResponse.class,
    tags = {
      "Messages",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(code = 200, message = "OK", response = UserResponse.class),
      @ApiResponse(
        code = 404,
        message = "Not Found - An email link couldn't be found for the specified GUID"
      )
    }
  )
  @RequestMapping(
    value = "/messages/{guid}/user",
    produces = {"application/json"},
    consumes = {"application/json"},
    method = RequestMethod.GET
  )
  default ResponseEntity<UserResponse> messagesGuidUserGet(
      @ApiParam(
            value = "Guid of the User we want to retrieve eg. e61ae7be-3d2f-4f32-9aab-adc915b6b58c",
            required = true
          )
          @PathVariable("guid")
          String guid) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(
              getObjectMapper().get().readValue("\"\"", UserResponse.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default MessagesApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @ApiOperation(
    value = "Sends an email to a user",
    nickname = "sendEmail",
    notes = "Sends an email to the specified user",
    tags = {
      "Messages",
    }
  )
  @ApiResponses(
    value = {
      @ApiResponse(
        code = 200,
        message = "Success - A password email link has been created and sent."
      ),
      @ApiResponse(code = 400, message = "Bad request - user id empty or not integer"),
      @ApiResponse(code = 404, message = "The specified user couldn't be found")
    }
  )
  @RequestMapping(
    value = "/messages/send-email",
    produces = {"application/json"},
    consumes = {"application/json"},
    method = RequestMethod.POST
  )
  default ResponseEntity<Void> sendEmail(
      @ApiParam(value = "The user that needs an email link sending.", required = true)
          @Valid
          @RequestBody
          UserId userId) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default MessagesApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
